{"version":3,"file":"static/js/318.ef0fcd5f.chunk.js","mappings":"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","sources":["components/Login/Login.jsx","webpack://learnReact/./src/components/hoc/FormsControls/createFormsControls.module.css?7b4f","components/hoc/FormsControls/createFormsControls.js","utils/validators/validators.js","webpack://learnReact/./src/components/Login/Login.module.css?3530"],"sourcesContent":["import React from 'react'\nimport { connect } from 'react-redux'\nimport { Navigate } from 'react-router-dom'\nimport { reduxForm } from 'redux-form'\nimport { login } from '../../redux/auth-reducer'\nimport { required } from '../../utils/validators/validators'\nimport { createField, Input } from '../hoc/FormsControls/createFormsControls'\nimport classes from './Login.module.css'\n\nconst LoginForm = ({ handleSubmit, error, captchaUrl }) => {\n\treturn (\n\t\t<form onSubmit={handleSubmit}>\n\t\t\t{/* <Field\n\t\t\t\t\tvalidate={[required]}\n\t\t\t\t\tplaceholder='email'\n\t\t\t\t\tname='email'\n\t\t\t\t\tcomponent={Input}\n\t\t\t\t/> */}\n\t\t\t{createField('Email', 'email', [required], Input)}\n\t\t\t{createField('Password', 'password', [required], Input, {\n\t\t\t\ttype: 'password'\n\t\t\t})}\n\t\t\t{createField(\n\t\t\t\tnull,\n\t\t\t\t'rememberMe',\n\t\t\t\t[],\n\t\t\t\tInput,\n\t\t\t\t{ type: 'checkbox' },\n\t\t\t\t'remember me'\n\t\t\t)}\n\t\t\t{captchaUrl && <img src={captchaUrl} alt='' />}\n\t\t\t{captchaUrl &&\n\t\t\t\tcreateField('Symbols from image', 'captcha', [required], Input, {})}\n\t\t\t{/* <Field\n\t\t\t\tvalidate={[required]}\n\t\t\t\tplaceholder='Password'\n\t\t\t\tname='password'\n\t\t\t\ttype='password'\n\t\t\t\tcomponent={Input}\n\t\t\t/> */}\n\n\t\t\t{/* <Field type='checkbox' name='rememberMe' component={Input} /> */}\n\t\t\t{error && <div className={classes.FormSummaryError}>{error}</div>}\n\t\t\t<div>\n\t\t\t\t<button>Login</button>\n\t\t\t</div>\n\t\t</form>\n\t)\n}\n\nconst LoginReduxForm = reduxForm({\n\tform: 'login'\n})(LoginForm)\n\nconst Login = ({ login, isAuth, captchaUrl, userId }) => {\n\tconst onSubmit = ({ email, password, rememberMe, captcha }) => {\n\t\tlogin(email, password, rememberMe, captcha)\n\t}\n\n\tif (isAuth) {\n\t\treturn <Navigate to={`/profile/${userId}`} />\n\t}\n\n\treturn (\n\t\t<div className={classes.Login}>\n\t\t\t<h1>Access denied! You need to login :(</h1>\n\t\t\t<LoginReduxForm onSubmit={onSubmit} captchaUrl={captchaUrl} />\n\t\t</div>\n\t)\n}\nexport default connect(\n\tstate => {\n\t\treturn {\n\t\t\tisAuth: state.auth.isAuth,\n\t\t\tcaptchaUrl: state.auth.captchaUrl,\n\t\t\tuserId: state.auth.userId\n\t\t}\n\t},\n\t{\n\t\tlogin\n\t}\n)(Login)\n","// extracted by mini-css-extract-plugin\nexport default {\"Textarea\":\"createFormsControls_Textarea__IlAFW\",\"error\":\"createFormsControls_error__CVMTv\"};","import { Field } from 'redux-form'\nimport classes from './createFormsControls.module.css'\n\nconst Element =\n\tElement =>\n\t({ input, meta: { touched, error }, ...props }) => {\n\t\tconst hasError = touched && error\n\n\t\treturn (\n\t\t\t<div className={classes.Textarea + ' ' + (hasError && classes.error)}>\n\t\t\t\t<Element {...input} {...props} />\n\t\t\t\t{hasError && <span>{error}</span>}\n\t\t\t</div>\n\t\t)\n\t}\n\nexport const Textarea = Element('textarea')\n\nexport const Input = Element('input')\n\nexport const createField = (\n\tplaceholder,\n\tname,\n\tvalidators,\n\tcomponent,\n\tprops = {},\n\ttext = null\n) => (\n\t<div>\n\t\t<Field\n\t\t\tvalidate={validators}\n\t\t\tplaceholder={placeholder}\n\t\t\tname={name}\n\t\t\tcomponent={component}\n\t\t\t{...props}\n\t\t/>\n\t\t{text}\n\t</div>\n)\n","export const required = value => {\n\tif (value) return undefined\n\n\treturn 'Field is required'\n}\n\nexport const maxLengthCreator = maxLength => value => {\n\tif (value && value.length > maxLength)\n\t\treturn `Max length is ${maxLength} symbols`\n\n\treturn undefined\n}\n\nexport const maxLength10 = maxLengthCreator(10)\nexport const maxLength100 = maxLengthCreator(100)\n","// extracted by mini-css-extract-plugin\nexport default {\"Login\":\"Login_Login__VdlKH\",\"FormSummaryError\":\"Login_FormSummaryError__JXw3A\"};"],"names":["LoginReduxForm","reduxForm","form","_ref","handleSubmit","error","captchaUrl","_jsxs","onSubmit","children","createField","required","Input","type","_jsx","src","alt","className","classes","FormSummaryError","connect","state","isAuth","auth","userId","login","_ref2","Navigate","to","concat","Login","_ref3","email","password","rememberMe","captcha","Element","input","meta","touched","props","hasError","Textarea","placeholder","name","validators","component","arguments","length","undefined","text","Field","validate","value","maxLengthCreator","maxLength","maxLength10","maxLength100"],"sourceRoot":""}